networks:
  web:
    external: true

volumes:
  auth:
    driver: local
    driver_opts: 
      type: none
      o: bind
      device: ${LOCAL_DEVICE}
  cache:
    driver: local
    driver_opts: 
      type: none
      o: bind
      device: ${LOCAL_DEVICE}

# OBS: Caso não queira usar os volumes de modo que o container armazene em um diretório local configurado por você, 
# comente as linhas de volumes (auth e cache) que tem um # na frete e descomente as linhas que estão logo abaixo, assim o container irá criar os diretórios
# dentro do próprio container e não irá persistir os dados após o mesmo ser removido.

services:
  whatsapp-api:
    image: latixa12/api:latest
    container_name: whatsapp-api
    networks: [web]
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - WHATSAPP_GROUP_A=${WHATSAPP_GROUP_A}
      - WHATSAPP_GROUP_B=${WHATSAPP_GROUP_B}
      - WHATSAPP_GROUP_C=${WHATSAPP_GROUP_C}
      - WHATSAPP_GROUP_D=${WHATSAPP_GROUP_D}
      - WHATSAPP_GROUP_E=${WHATSAPP_GROUP_E}
    volumes:
      - auth:/app/.wwebjs_auth   #
      - cache:/app/.wwebjs_cache #
      #- .wwebjs_auth:/app/.wwebjs_auth
      #- .wwebjs_cache:/app/.wwebjs_cache
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.whatsapp-api.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.whatsapp-api.entrypoints=websecure"
      - "traefik.http.routers.whatsapp-api.tls.certresolver=le"
      - "traefik.http.services.whatsapp-api.loadbalancer.server.port=3000"

